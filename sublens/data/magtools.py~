"""
Absolute magnitudes and K-correction
"""

import sys
import time

import numpy as np
import scipy.integrate as integr
import scipy.interpolate as interp
from astropy import units as u
from sublens import default_cosmo


def apply_kcorr(robs, zarr, kcorr_table, kind="linear"):
    """
    Applies k-correction to apparent magnitudes for z0=0.0 frame

    :param robs:  observed des r-band observed magnitudes
    :param zarr: redshifts for the same entries
    :return: rabs absolute magnitudes
    """

    assert robs.shape == zarr.shape

    ifunc = interp.interp1d(kcorr_table[:, 0], kcorr_table[:, 1], kind=kind)
    varr = ifunc(zarr)
    rmag_abs = robs - varr
    return rmag_abs


def dist_modulus(z, cosmo=None):
    """
    Calculates distance modulus in a flat LCDM cosmology

    :param z: redshift
    :param h: Hubble parameter
    :param om_m: \Omega_{Matter}
    :return:
    """
    if cosmo is None:
        cosmo = default_cosmo()
    dl = cosmo.angular_diameter_distance(z).to(u.pc).value
    dm = 5. * np.log10(dl / 10.)
    return dm


def rband_kcorr(z, templ, resp, low=540., high=730, tme=False):
    """
    Calculate K-correction for the DES R-band

    Uses Red-template from Blanton et al. 2007

    NOTE:
    ---------
    Due to numerical errors the wavelengths range should be reasonably close to
    the actual bandpass limits.

    :param z: redshift
    :param templ: red template
    :param resp: response curve
    :param low: lower bound of the wavelength range
    :param high: upper bound of the wavelength range
    :param tme: prints integration time to stdout if True
    :return: value of K-correction
    """

    ftempl = interp.interp1d(templ[:, 0], templ[:, 1],
                             bounds_error=False, fill_value=0.0)
    fresp = interp.interp1d(resp[:, 0], resp[:, 1],
                            bounds_error=False, fill_value=0.0)

    time0 = time.time()

    oint, oerr = des_r_obsint(z, ftempl, fresp, low=low, high=high)
    eint, eerr = des_r_emint(ftempl, fresp, low=low, high=high)

    kval = -2.5 * np.log10(oint / eint / (1. + z))

    time1 = time.time()
    if tme:
        print(time1 - time0)
    return kval


def des_r_emint(ftemplate, fresponse, low=540., high=730):
    """Integral over emitted spectra for  r band DES"""
    y, abserr = integr.quad(eexpr, low, high,  args=(ftemplate, fresponse))
    # y = integr.romberg(eexpr, low, high, args=(ftemplate, fresponse))
    # abserr = 0.0
    return y, abserr


def des_r_obsint(z, ftemplate, fresponse, low=540., high=730):
    """Integral over observed spectra for  r band DES"""
    y, abserr = integr.quad(oexpr, low, high,
                            args=(ftemplate, fresponse, z))
    # y = integr.romberg(oexpr, low, high, args=(ftemplate, fresponse, z))
    # abserr = 0.0
    return y, abserr


def eexpr(ll, ftemplate, fresponse):
    """Emitted frame"""

    return ll * ftemplate(ll) * fresponse(ll)

def oexpr(ll, ftemplate, fresponse, z):
    """Observed frame"""
    return ll * ftemplate(ll / (1. + z)) * fresponse(ll)
